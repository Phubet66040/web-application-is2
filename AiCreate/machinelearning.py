import streamlit as st
import pandas as pd
import os
import numpy as np
import joblib
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

def show():
    st.title("ü§ñ Machine Learning Page")
    st.write("‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô")

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(BASE_DIR, "../dataset/Bangkok Land Data.csv")

# Load dataset
@st.cache_data



def load_data():
   
    df = pd.read_csv(file_path, encoding="utf-8-sig")  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    return df  # ‡∏™‡πà‡∏á DataFrame ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

df = load_data()

# Rename columns for easier handling
df.rename(columns={
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®': 'UTMMAP1',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ú‡πà‡∏ô‡∏£‡∏∞‡∏ß‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®': 'UTMMAP2',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏ß‡∏≤‡∏á UTM': 'UTMMAP3',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ú‡πà‡∏ô': 'UTMMAP4',
    '‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà': 'UTMSCALE',
    '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô': 'LAND_NO',
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏ß.)': 'EVAPRICE'
}, inplace=True)

st.title('ü§ñ Machine Learning')

st.info('This is bangkok land data machine learing')

# Show Preview Dataset
with st.expander("Show Preview Dataset"):
    st.write(df.head())

# Data Visualisation
with st.expander("Data Visualisation"):
    st.scatter_chart(data=df, x='UTMMAP1', y='EVAPRICE', color='#1f77b4')

# Input Features
with st.expander("Input Features"):
    UTMMAP1 = st.slider("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", min_value=int(df['UTMMAP1'].min()), max_value=int(df['UTMMAP1'].max()), value=int(df['UTMMAP1'].median()))
    UTMMAP2 = st.slider("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ú‡πà‡∏ô‡∏£‡∏∞‡∏ß‡∏≤‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", min_value=int(df['UTMMAP2'].min()), max_value=int(df['UTMMAP2'].max()), value=int(df['UTMMAP2'].median()))
    UTMMAP3 = st.slider("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏∞‡∏ß‡∏≤‡∏á UTM", min_value=int(df['UTMMAP3'].min()), max_value=int(df['UTMMAP3'].max()), value=int(df['UTMMAP3'].median()))
    UTMMAP4 = st.slider("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ú‡πà‡∏ô", min_value=int(df['UTMMAP4'].min()), max_value=int(df['UTMMAP4'].max()), value=int(df['UTMMAP4'].median()))
    UTMSCALE = st.slider("‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", min_value=int(df['UTMSCALE'].min()), max_value=int(df['UTMSCALE'].max()), value=int(df['UTMSCALE'].median()))

# Data Preparation
with st.expander("Data Preparation"):
    @st.cache_resource
    def train_model():
        X = df[['UTMMAP1', 'UTMMAP2', 'UTMMAP3', 'UTMMAP4', 'UTMSCALE']]
        y = df['EVAPRICE']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        return model

    model = train_model()

    if st.button("Predict Price"):
        input_data = np.array([[UTMMAP1, UTMMAP2, UTMMAP3, UTMMAP4, UTMSCALE]])
        prediction = model.predict(input_data)[0]
        st.success(f"Estimated Land Price: {prediction:,.2f} Baht per sq. wah")